# Beta Estimation 

```{python}
import ibis
ibis.options.interactive = True
```

On my computers, I store my WRDS ID in an environment variable `WRDS_ID`. 
You could replace the following lines with `wrds_id = "your_wrds_id"`.
 
```{python}
import os
os.environ['DATA_DIR'] = "/Users/igow/Library/CloudStorage/Dropbox/pq_data"
data_dir = os.environ['DATA_DIR']
data_dir
```

```{python}
def load_parquet(con, table, schema, data_dir=os.environ['DATA_DIR']):
  pq_file = os.path.join(data_dir, schema, table + ".parquet")
  return con.read_parquet(pq_file)
```

Now I connect to the WRDS PostgreSQL database and establish variables representing `crsp.dsf` and `crsp.stocknames`.
Note that these are effectively **remote** data frames, as no data is brought into memory.
As such these lines take almost no time to run.

```{python}
db = ibis.duckdb.connect()

dsf = load_parquet(db, table="dsf", schema="crsp")
stocknames = load_parquet(db, table="stocknames", schema="crsp")
```

## Estimating Beta using Monthly Returns

```{python}
crsp_monthly = load_parquet(db, "crsp_monthly", "tidy_finance")
crsp_daily = load_parquet(db, "crsp_daily", "tidy_finance")
factors_ff3_monthly = load_parquet(db,
                                   "factors_ff3_monthly", 
                                   "tidy_finance") 
factors_ff3_daily = load_parquet(db,
                                 "factors_ff3_daily", 
                                 "tidy_finance") 
```

```{python}
t1 = crsp_monthly. \
  select("permno", "month", "industry", "ret_excess")
  
t2 = factors_ff3_monthly. \
      select("month", "mkt_excess")

joined = t1.left_join(t2, t1.month==t2.month)
```


```{python}
from ibis import udf

w = ibis.window(group_by="permno", order_by="month", preceding=60, following=0)
```

```{python}
@ibis.udf.agg.builtin
def regr_slope(y: float, x: float) -> float:
    ...
    
@ibis.udf.agg.builtin
def regr_count(y: float, x: float) -> float:
    ...
```

```{python}
betas_monthly_all = joined. \
    mutate(beta = regr_slope(joined.ret_excess, joined.mkt_excess).over(w),
           n_rets = regr_count(joined.ret_excess, joined.mkt_excess).over(w)). \
    select("permno", "month", "beta", "n_rets")
    
betas_monthly = betas_monthly_all.filter([betas_monthly_all.n_rets >= 48])
```

```{python}
w = ibis.window(group_by="permno", order_by="date", preceding=ibis.interval(months=3), following=0)
```

```{python}
t1 = crsp_daily. \
  select("permno", "date", "ret_excess")
  
t2 = factors_ff3_daily. \
      select("date", "mkt_excess")

joined = t1.left_join(t2, t1.date==t2.date)
```

```{python}
betas_daily_all = joined. \
    mutate(beta = regr_slope(joined.ret_excess, joined.mkt_excess).over(w),
           n_rets = regr_count(joined.ret_excess, joined.mkt_excess).over(w)). \
    select("permno", "date", "beta", "n_rets")
```

```{python}
betas_daily = betas_daily_all.filter([betas_daily_all.n_rets >= 50])
```

## Comparing beta estimates

The remaining code is largely copy-pasted from Tidy Finance.
Our focus here is @fig-beta-comp, a version of Figure 4 from Tidy Finance that compares monthly and daily beta estimates for four stocks.

```{r}
examples <- tribble(
  ~permno, ~company,
  14593, "Apple",
  10107, "Microsoft",
  93436, "Tesla",
  17778, "Berkshire Hathaway") |>
  copy_to(db, df = _, name = "examples", overwrite = TRUE)
```

Because we have retained `date`, we merge on that variable too when constructing `beta`.

```{r}
beta <- 
  beta_monthly |>
  full_join(beta_daily, 
            by = c("permno", "month"),
            suffix = c("_monthly", "_daily"))
```

```{r}
beta_examples <- 
  beta |>
  inner_join(examples, by = "permno") |>
  select(permno, company, month, beta_monthly) 

beta_examples |>
  filter(!is.na(beta_monthly)) |>
  ggplot(aes(
    x = month, 
    y = beta_monthly, 
    color = company,
    linetype = company)) +
  geom_line() +
  labs(
    x = NULL, y = NULL, color = NULL, linetype = NULL,
    title = "Monthly beta estimates for example stocks using 5 years of data"
  )
```

```{r}
crsp_monthly |>
  left_join(beta, join_by(permno, month)) |>
  filter(!is.na(beta_monthly)) |>
  group_by(industry, permno) |>
  summarize(beta = mean(beta_monthly, na.rm = TRUE), 
            .groups = "drop") |>
  ggplot(aes(x = reorder(industry, beta, FUN = median), y = beta)) +
  geom_boxplot() +
  coord_flip() +
  labs(
    x = NULL, y = NULL,
    title = "Firm-specific beta distributions by industry"
  )
```
```{r}
beta |>
  filter(!is.na(beta_monthly)) |>
  group_by(month) |>
  mutate(quantile = ntile(-beta_monthly, 10) * 10) |>
  group_by(month, quantile) |>
  summarize(x = min(beta_monthly, na.rm = TRUE), .groups = "drop") |>
  filter(quantile != 100) |>
  ggplot(aes(
    x = month, 
    y = x, 
    color = as_factor(quantile),
    linetype = as_factor(quantile)
    )) +
  geom_line() +
  labs(
    x = NULL, y = NULL, color = NULL, linetype = NULL,
    title = "Monthly deciles of estimated betas",
  )
```

```{r}
#| label: fig-beta-comp
beta |>
  inner_join(examples, by = "permno") |>
  filter(month >= '1980-01-01') |>
  pivot_longer(cols = c(beta_monthly, beta_daily)) |>
  filter(!is.na(value)) |>
  ggplot(aes(
    x = month, 
    y = value, 
    color = name, 
    linetype = name
    )) +
  geom_line() +
  facet_wrap(~ company, ncol = 1) +
  labs(
    x = NULL, y = NULL, color = NULL, linetype = NULL, 
    title = "Comparison of beta estimates using monthly and daily data"
  )
```

```{r}
beta_long <- 
  crsp_monthly |>
  left_join(beta, by = c("permno", "month")) |>
  select(month, beta_monthly, beta_daily) |>
  pivot_longer(cols = c(beta_monthly, beta_daily))

beta_long |>
  group_by(month, name) |>
  summarize(share = sum(as.double(!is.na(value)), na.rm = TRUE) / n(),
            .groups = "drop") |>
  ggplot(aes(
    x = month, 
    y = share, 
    color = name,
    linetype = name
    )) +
  geom_line() +
  scale_y_continuous(labels = percent) +
  labs(
    x = NULL, y = NULL, color = NULL, linetype = NULL,
    title = "End-of-month share of securities with beta estimates"
  ) +
  coord_cartesian(ylim = c(0, 1))
```

```{r}
#| warning: false
beta_long |>
  select(name, value) |>
  filter(!is.na(value)) |>
  group_by(name) |>
  summarize(
    mean = mean(value),
    sd = sd(value),
    min = min(value),
    q05 = quantile(value, 0.05),
    q50 = quantile(value, 0.50),
    q95 = quantile(value, 0.95),
    max = max(value),
    n = n()
  ) |>
  collect()
```

```{r}
dbDisconnect(db, shutdown = TRUE)
```