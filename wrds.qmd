# WRDS, CRSP, and Compustat

```{r}
#| warning: false
library(tidyverse)
library(DBI)
library(scales)
library(farr)
library(dbplyr)
```
```{r}
start_date <- ymd("1960-01-01")
end_date <- ymd("2022-12-31")
```

## Accessing WRDS

In *Tidy Finance* interaction with WRDS is through the WRDS PostgreSQL database.
Here we will use `wrds_update_pq()` from the `wrds2pg` Python library to get parquet files for WRDS tables.

```{r}
db <- dbConnect(duckdb::duckdb())
```

```{r}
system_time <- function(x) {
  print(system.time(x))
  x
}
```

```{r}
Sys.setenv(WRDS_ID="iangow")
```

```{python}
#| eval: false
from wrds2pg import wrds_update_pq
wrds_update_pq("msenames", "crsp")
wrds_update_pq("msedelist", "crsp", fix_missing=True)
wrds_update_pq("ccmxpf_linktable", "crsp", fix_missing=True)
wrds_update_pq("dsf", "crsp", 
               fix_missing=True,
               col_types={"permno": "integer",
                          "permco": "integer"})
wrds_update_pq("msf", "crsp", 
               fix_missing=True,
               col_types={"permno": "integer",
                          "permco": "integer"})
wrds_update_pq("funda", "comp", fix_missing = True)
```

## Downloading and Preparing CRSP

We've already downloaded the data we need, so we're just "preparing" CRSP here.

```{r}
msf <- load_parquet(db, "msf", "crsp")
msenames <- load_parquet(db, "msenames", "crsp")
msedelist <- load_parquet(db, "msedelist", "crsp")
factors_ff3_monthly <- load_parquet(db, "factors_ff3_monthly",
                                    "tidy_finance")
cpi_monthly <- load_parquet(db, "cpi_monthly", "tidy_finance")
```

```{r}
crsp_monthly <- 
  msf |>
  filter(date >= start_date & date <= end_date) |>
  inner_join(
    msenames |>
      filter(shrcd %in% c(10, 11)) |>
      select(permno, exchcd, siccd, namedt, nameendt),
    by = c("permno")
  ) |>
  filter(date >= namedt & date <= nameendt) |>
  mutate(month = floor_date(date, "month")) |>
  left_join(
    msedelist |>
      select(permno, dlstdt, dlret, dlstcd) |>
      mutate(month = floor_date(dlstdt, "month")),
    by = c("permno", "month")
  ) |>
  select(
    permno, # Security identifier
    date, # Date of the observation
    month, # Month of the observation
    ret, # Return
    shrout, # Shares outstanding (in thousands)
    altprc, # Last traded price in a month
    exchcd, # Exchange code
    siccd, # Industry code
    dlret, # Delisting return
    dlstcd # Delisting code
  ) |>
  mutate(shrout = shrout * 1000,
         mktcap = abs(shrout * altprc) / 10^6,
         mktcap = na_if(mktcap, 0)) |>
  group_by(permno) |>
  window_order(month) |>
  mutate(month_lag = lag(month),
         mktcap_lag = lag(mktcap)) |>
  ungroup() |>
  mutate(
    exchange = case_when(
      exchcd %in% c(1, 31) ~ "NYSE",
      exchcd %in% c(2, 32) ~ "AMEX",
      exchcd %in% c(3, 33) ~ "NASDAQ",
      .default = "Other"),
    industry = case_when(
      siccd >= 1 & siccd <= 999 ~ "Agriculture",
      siccd >= 1000 & siccd <= 1499 ~ "Mining",
      siccd >= 1500 & siccd <= 1799 ~ "Construction",
      siccd >= 2000 & siccd <= 3999 ~ "Manufacturing",
      siccd >= 4000 & siccd <= 4899 ~ "Transportation",
      siccd >= 4900 & siccd <= 4999 ~ "Utilities",
      siccd >= 5000 & siccd <= 5199 ~ "Wholesale",
      siccd >= 5200 & siccd <= 5999 ~ "Retail",
      siccd >= 6000 & siccd <= 6799 ~ "Finance",
      siccd >= 7000 & siccd <= 8999 ~ "Services",
      siccd >= 9000 & siccd <= 9999 ~ "Public",
      TRUE ~ "Missing"),
      ret_adj = case_when(
        is.na(dlstcd) ~ ret,
        !is.na(dlstcd) & !is.na(dlret) ~ dlret,
        dlstcd %in% c(500, 520, 580, 584) |
        (dlstcd >= 551 & dlstcd <= 574) ~ -0.30,
        dlstcd == 100 ~ ret,
        TRUE ~ -1)
      ) |>
  select(-c(dlret, dlstcd)) |>
  left_join(
    factors_ff3_monthly |>
      select(month, rf),
    by = "month") |>
  mutate(
    ret_excess = ret_adj - rf,
    ret_excess = pmax(ret_excess, -1, na.rm = TRUE)
  ) |>
  select(-ret_adj, -rf) |>
  filter(!is.na(ret_excess), 
         !is.na(mktcap), !is.na(mktcap_lag))
```

```{r}
#| cache: true
#| label: pq-repo
#| dependson: other-macro
save_parquet <- function(df, conn, 
                         schema = "tidy_finance",
                         data_dir = Sys.getenv("DATA_DIR")) {
  pq_dir <- file.path(data_dir, schema = schema)
  if (!dir.exists(pq_dir)) dir.create(pq_dir)
  pq_file_name <- str_c(deparse(substitute(df)), ".parquet")
  pq_path <- file.path(pq_dir, pq_file_name)
  df_temp <- compute(df, name = "df_temp", overwrite=TRUE)
  dbExecute(conn, str_c("COPY (SELECT * FROM df_temp) TO '",
                          pq_path, 
                          "' (FORMAT 'parquet')"))
  dbExecute(conn, "DROP TABLE IF EXISTS df_temp")
}
```

## First glimpse of the CRSP sample

```{r}
crsp_monthly |>
  count(exchange, date) |>
  ggplot(aes(x = date, y = n, color = exchange, linetype = exchange)) +
  geom_line() +
  labs(
    x = NULL, y = NULL, color = NULL, linetype = NULL,
    title = "Monthly number of securities by listing exchange"
  ) +
  scale_x_date(date_breaks = "10 years", date_labels = "%Y") +
  scale_y_continuous(labels = comma) +
  theme(legend.position = "bottom")
```

In the query in the book, `mktcap = sum(mktcap, na.rm = TRUE) / cpi`.
However, DuckDB and PostgreSQL are much stricter about aggregate queries than SQLite.
A variable must appear either in the `GROUP BY` clause or inside an aggregate function.
Here `cpi` does not meet this requirement, so we put `cpi` inside the `sum()` aggregate.

Note that the book also has `mutate(month = ymd(month))`, presumably because SQLite does note retain the type information for `month`.
Of course, DuckDB does retain this type and this line is not necessary.

```{r}
crsp_monthly |>
  left_join(cpi_monthly, by = "month") |>
  group_by(month, exchange) |>
  summarize(
    mktcap = sum(mktcap / cpi, na.rm = TRUE),
    .groups = "drop"
  ) |>
  ggplot(aes(
    x = month, y = mktcap / 1000,
    color = exchange, linetype = exchange
  )) +
  geom_line() +
  labs(
    x = NULL, y = NULL, color = NULL, linetype = NULL,
    title = "Monthly market cap by listing exchange in billions of Dec 2022 USD"
  ) +
  scale_x_date(date_breaks = "10 years", date_labels = "%Y") +
  scale_y_continuous(labels = comma) +
  theme(legend.position = "bottom")
```


```{r}
#| warning: false
crsp_monthly |>
  count(exchange, date) |>
  ggplot(aes(x = date, y = n, color = exchange, linetype = exchange)) +
  geom_line() +
  labs(
    x = NULL, y = NULL, color = NULL, linetype = NULL,
    title = "Monthly number of securities by listing exchange"
  ) +
  scale_x_date(date_breaks = "10 years", date_labels = "%Y") +
  scale_y_continuous(labels = comma) +
  theme(legend.position = "bottom")
```

```{r}
crsp_monthly |>
  left_join(cpi_monthly, by = "month") |>
  group_by(month, exchange) |>
  summarize(mktcap = sum(mktcap/cpi, na.rm = TRUE),
            .groups = "drop") |>
  ggplot(aes(
    x = month, y = mktcap / 1000,
    color = exchange, linetype = exchange
  )) +
  geom_line() +
  labs(
    x = NULL, y = NULL, color = NULL, linetype = NULL,
    title = "Monthly market cap by listing exchange in billions of Dec 2022 USD"
  ) +
  scale_x_date(date_breaks = "10 years", date_labels = "%Y") +
  scale_y_continuous(labels = comma) +
  theme(legend.position = "bottom")
```

```{r}
#| warning: false
crsp_monthly_industry <- 
  crsp_monthly |>
  left_join(cpi_monthly, by = "month") |>
  group_by(month, industry) |>
  summarize(
    securities = n_distinct(permno),
    mktcap = sum(mktcap) / mean(cpi),
    .groups = "drop"
    )

crsp_monthly_industry |>
  ggplot(aes(
    x = month,
    y = securities,
    color = industry,
    linetype = industry
  )) +
  geom_line() +
  labs(
    x = NULL, y = NULL, color = NULL, linetype = NULL,
    title = "Monthly number of securities by industry"
  ) +
  scale_x_date(date_breaks = "10 years", date_labels = "%Y") +
  scale_y_continuous(labels = comma) +
  theme(legend.position = "bottom")
```

```{r}
crsp_monthly_industry |>
  ggplot(aes(
    x = month,
    y = mktcap / 1000,
    color = industry,
    linetype = industry
  )) +
  geom_line() +
  labs(
    x = NULL, y = NULL, color = NULL, linetype = NULL,
    title = "Monthly total market cap by industry in billions as of Dec 2022 USD"
  ) +
  scale_x_date(date_breaks = "10 years", date_labels = "%Y") +
  scale_y_continuous(labels = comma) +
  theme(legend.position = "bottom")
```

## Daily CRSP data

```{r}
dsf_db <- load_parquet(db, "dsf", "crsp")

factors_ff3_daily <- load_parquet(db,
                                  "factors_ff3_daily",
                                  "tidy_finance")

crsp_daily <- 
  dsf_db |>
    filter(date >= start_date & date <= end_date) |>
    select(permno, date, ret) |>
    left_join(msedelist, 
              by = c("permno", "date"="dlstdt")) |> 
    mutate(ret = coalesce(dlret, ret)) |> 
    select(-dlret) |> 
    left_join(msedelist |> 
                select(permno, dlstdt), by = "permno") |> 
    mutate(dlstdt = coalesce(dlstdt, end_date)) |> 
    filter(date <= dlstdt) |> 
    select(-dlstdt) |>
    mutate(month = floor_date(date, "month")) |>
    left_join(
      factors_ff3_daily |>
        select(date, rf), by = "date") |>
    mutate(
      ret_excess = ret - rf,
      ret_excess = pmax(ret_excess, -1)
      ) |>
    select(permno, date, month, ret, ret_excess)
```

```{r}
save_parquet(crsp_daily, conn = db) |> system_time()
```

## Preparing Compustat data

```{r}
funda_db <- load_parquet(db, "funda", "comp")
```

```{r}
compustat_raw <- 
  funda_db |>
  filter(
    indfmt == "INDL" &
      datafmt == "STD" &
      consol == "C" &
      datadate >= start_date & datadate <= end_date
  ) |>
  select(
    gvkey, # Firm identifier
    datadate, # Date of the accounting data
    seq, # Stockholders' equity
    ceq, # Total common/ordinary equity
    at, # Total assets
    lt, # Total liabilities
    txditc, # Deferred taxes and investment tax credit
    txdb, # Deferred taxes
    itcb, # Investment tax credit
    pstkrv, # Preferred stock redemption value
    pstkl, # Preferred stock liquidating value
    pstk, # Preferred stock par value
    capx, # Capital investment
    oancf, # Operating cash flow
    sale,  # Revenue
    cogs, # Costs of goods sold
    xint, # Interest expense
    xsga # Selling, general, and administrative expenses
  ) |>
  mutate(
    be = coalesce(seq, ceq + pstk, at - lt) +
      coalesce(txditc, txdb + itcb, 0) -
      coalesce(pstkrv, pstkl, pstk, 0),
    be = if_else(be <= 0, as.numeric(NA), be),
    op = (sale - coalesce(cogs, 0) - 
            coalesce(xsga, 0) - coalesce(xint, 0)) / be
    ) |>
  mutate(year = year(datadate)) |>
  group_by(gvkey, year) |>
  filter(datadate == max(datadate)) |>
  ungroup()

compustat_lag <-
  compustat_raw |> 
  select(gvkey, year, at_lag = at) |> 
  mutate(year = year + 1)

compustat <- 
  compustat_raw |> 
  left_join(compustat_lag, by = c("gvkey", "year")) |>
  mutate(
    inv = at / at_lag - 1,
    inv = if_else(at_lag <= 0, as.numeric(NA), inv)
  )
```

```{r}
save_parquet(compustat, conn = db) |> system_time()
```

## Merging CRSP with Compustat

```{r}
ccmxpf_linktable_db <- load_parquet(db, "ccmxpf_linktable", "crsp")
```

```{r}
ccmxpf_linktable <- ccmxpf_linktable_db |>
  filter(linktype %in% c("LU", "LC") &
    linkprim %in% c("P", "C") &
    usedflag == 1) |>
  select(permno = lpermno, gvkey, linkdt, linkenddt) |>
  mutate(linkenddt = coalesce(linkenddt, today()))
```
```{r}
ccm_links <- 
  crsp_monthly |>
  inner_join(ccmxpf_linktable, 
             by = "permno", relationship = "many-to-many") |>
  filter(!is.na(gvkey) & 
           (date >= linkdt & date <= linkenddt)) |>
  select(permno, gvkey, date)

crsp_monthly <- 
  crsp_monthly |>
  left_join(ccm_links, by = c("permno", "date"))
```

```{r}
save_parquet(crsp_monthly, conn = db)
```

```{r}
crsp_monthly |>
  group_by(permno, year = year(month)) |>
  filter(date == max(date)) |>
  ungroup() |>
  left_join(compustat, by = c("gvkey", "year")) |>
  group_by(exchange, year) |>
  summarize(
    share = n_distinct(permno[!is.na(be)]) / n_distinct(permno),
    .groups = "drop"
  ) |>
  ggplot(aes(
    x = year, 
    y = share, 
    color = exchange,
    linetype = exchange
    )) +
  geom_line() +
  labs(
    x = NULL, y = NULL, color = NULL, linetype = NULL,
    title = "Share of securities with book equity values by exchange"
  ) +
  scale_y_continuous(labels = percent) +
  coord_cartesian(ylim = c(0, 1)) +
  theme(legend.position = "bottom")
```
